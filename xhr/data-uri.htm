<!doctype html>
<meta charset=utf-8>
<title>XMLHttpRequest: data URLs</title>
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<div id="log"></div>

<script>
  function do_test(method, url, mimeType, testNamePostfix) {
    if (typeof mimeType === 'undefined' || mimeType === null) mimeType = 'text/plain';
    var test = async_test("XHR method " + method + " with MIME type " + mimeType + (testNamePostfix||''));
    test.step(function() {
      var client = new XMLHttpRequest(),
          body = method === "HEAD" ? "" : "Hello, World!";
      client.onreadystatechange = test.step_func(function () {
        if (client.readyState !== 4) {
          return;
        }
        assert_equals(client.responseText, body);
        assert_equals(client.status, 200);
        assert_equals(client.getResponseHeader('Content-Type'), mimeType);
        var allHeaders = client.getAllResponseHeaders();
        assert_regexp_match(allHeaders, /content\-type\:/i, 'getAllResponseHeaders() includes Content-Type');
        assert_false(/content\-length\:/i.test(allHeaders), 'getAllResponseHeaders() must not include Content-Length');
        test.done();
      });
      client.open(method, url);
      client.send(null);
    });
  }
  do_test('GET', "data:text/plain,Hello, World!");
  do_test('GET', "data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==", undefined, " (base64)");
  do_test('GET', "data:text/html,Hello, World!", 'text/html');
  do_test('GET', "data:text/html;charset=UTF-8,Hello, World!", 'text/html;charset=UTF-8');
  do_test('GET', "data:image/png,Hello, World!", 'image/png');
  do_test('POST', "data:text/plain,Hello, World!");
  do_test('PUT', "data:text/plain,Hello, World!");
  do_test('DELETE', "data:text/plain,Hello, World!");
  do_test('HEAD', "data:text/plain,Hello, World!");
  do_test('UNICORN', "data:text/plain,Hello, World!");

test(function() {
  assert_true(true, 4);
  assert_false(false, 5);
  assert_equals(undefined);
  assert_not_equals(5);
  try { assert_in_array(0); } catch (e) {}
  try { assert_object_equals(0); } catch (e) {}
  try { assert_array_equals([]); } catch (e) {}
  try { assert_array_approx_equals([], []); } catch (e) {}
  try { assert_approx_equals(0, 0); } catch (e) {}
  try { assert_less_than(0); } catch (e) {}
  try { assert_greater_than(0); } catch (e) {}
  try { assert_between_exclusive(0, 1); } catch (e) {}
  try { assert_less_than_equal(0); } catch (e) {}
  try { assert_greater_than_equal(0); } catch (e) {}
  try { assert_between_inclusive(0, 0); } catch (e) {}
  try { assert_regexp_match('a'); } catch (e) {}
  try { assert_class_string({}); } catch (e) {}
  try { assert_own_property({}); } catch (e) {}
  try { assert_not_own_property({}); } catch (e) {}
}, 'control sub-test');
</script>
